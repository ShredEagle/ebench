from conans import ConanFile, tools
from conan.tools.cmake import CMake
from conan.tools.files import copy

from os import path
from os import getcwd


class EntityConan(ConanFile):
    name = "entity_bench"
    license = "MIT"
    author = "FranzPoize"
    url = "https://github.com/Shreadeagle/ebench"
    description = "Entity benchmark"
    topics = ("bench", "mark")
    settings = "os", "compiler", "build_type", "arch"
    options = {
        "shared": [True, False],
        "engine": "ANY",
    }
    default_options = {
        "shared": False,
        "engine": "entity",
    }

    requires = (
        ("entity/0.1.1@adnn/stable"),
        ("math/72087b9ee3@adnn/develop"),
        ("benchmark/1.6.1"),
    )

    build_policy = "missing"
    generators = "CMakeDeps", "CMakeToolchain"

    scm = {
        "type": "git",
        "url": "auto",
        "revision": "auto",
        "submodule": "recursive",
    }

    python_requires="shred_conan_base/0.0.2@adnn/develop"


    def _generate_cmake_configfile(self):
        """ Generates a conanuser_config.cmake file which includes the file generated by """
        """ cmake_paths generator, and forward the remaining options to CMake. """
        with open("conanuser_config.cmake", "w") as config:
            config.write("message(STATUS \"Including user generated conan config.\")\n")
            config.write("set({} {})\n".format("SELECTED_engine", self.options.engine))


    def _configure_cmake(self):
        cmake = CMake(self)
        cmake.configure()
        return cmake


    def configure(self):
        tools.check_min_cppstd(self, "20")


    def generate(self):
           self._generate_cmake_configfile()


    def build(self):
        cmake = self._configure_cmake()
        cmake.build()


    def package(self):
        cmake = self._configure_cmake()
        cmake.install()

    def layout(self):
        self.python_requires["shred_conan_base"].module.shred_basic_layout(self);
        self.folders.root = "../../../.."


    def package_info(self):
        # Disable the config package that would otherwise be generated by CMakeDeps
        self.cpp_info.set_property("cmake_find_mode", "none")

        # Find CMake-generated package config when consuming the (installed) conan package
        self.cpp_info.builddirs = [path.join("lib", "cmake")]
