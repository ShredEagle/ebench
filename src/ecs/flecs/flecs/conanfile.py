from conans import ConanFile, tools
from conan.tools.cmake import CMake
from conan.tools.files import copy

from os import path
from os import getcwd


class EntityConan(ConanFile):
    name = "flecs_bench"
    license = "MIT"
    author = "FranzPoize"
    url = "https://github.com/Shreadeagle/ebench"
    description = "Entity benchmark"
    topics = ("bench", "mark")
    settings = "os", "compiler", "build_type", "arch"
    options = {
        "shared": [True, False],
        "engine": "ANY",
    }
    default_options = {
        "shared": False,
        "engine": "flecs",
    }

    requires = (
        ("flecs/2.4.8"),
        ("math/72087b9ee3@adnn/develop"),
        ("benchmark/1.6.1"),
    )

    build_policy = "missing"
    generators = "CMakeDeps", "CMakeToolchain"

    scm = {
        "type": "git",
        "url": "auto",
        "revision": "auto",
        "submodule": "recursive",
    }

    python_requires="shred_conan_base/local@"
    python_requires_extend="shred_conan_base.ShredBaseConanFile"


    def _generate_cmake_configfile(self):
        """ Generates a conanuser_config.cmake file which includes the file generated by """
        """ cmake_paths generator, and forward the remaining options to CMake. """
        with open("conanuser_config.cmake", "w") as config:
            config.write("set({} {})\n".format("CMAKE_EXPORT_COMPILE_COMMANDS", self.conf.get("user.shred.build:export_compile_commands", default="False")))
            config.write("set({} {})\n".format("BUILD_CONF_WarningAsError", self.conf.get("user.shred.build:warning_as_error", default="False")))
            config.write("set({} {})\n".format("SELECTED_engine", self.options.engine))

    def layout(self):
        super().layout("../../../..")
